[name]
database_name = coffee

[user]
user_sql = GRANT all ON coffee.* TO 'user_coffee'@'localhost' IDENTIFIED By 'rootroot'

[sql]
product =
    CREATE TABLE product(
        code CHAR(4) NOT NULL,
        name VARCHAR(20) null,
        primary key (code))

sale =
    CREATE TABLE sale(
        no INT(11) auto_increment,
        code    CHAR(4) NOT NULL,
        price   INT(11) NOT NULL,
        saleCnt INT(11) NOT NULL,
        marginRate  INT(11) NOT NULL,
        primary key(no),
        FOREIGN KEY(code) REFERENCES product(code))

sale_detail =
    CREATE TABLE sale_detail(
        no      int(11) not null,
        sale_price  int(11) not null,
        addTax      int(11) not null,
        supply_price    int(11) not null,
        marginPrice     int(11) not null,
        foreign key(no) references sale (no)
        on delete cascade)

[sql_select]
sale_price =
    select (select count(*) + 1 from sale_detail s2 where s2.sale_price > s1.sale_price) rank,
        sale.code code, p.name name, price, salecnt, supply_price, addTax, sale_price, marginRate, marginPrice
        from sale inner join sale_detail s1 on sale.no = s1.no join product p on sale.code = p.code order by rank;

margin_price =
    select (select count(*) + 1 from sale_detail s2 where s2.marginPrice > s1.marginPrice) rank,
        sale.code code, p.name name, price, salecnt, supply_price, addTax, sale_price, marginRate, marginPrice
        from sale inner join sale_detail s1 on sale.no = sale.no = s1.no join product p on sale.code = p.code order by rank;


[trigger]
insert =

    create trigger tri_sale_insert_after_detail
    after insert on sale
    for each row
    begin
        set @saleprice = new.price * new.salecnt,
        @addtax = ceil(@saleprice/11),
        @supprice = @saleprice - @addtax,
        @marPrice = round(@supprice * (new.marginrate/100));

       insert into sale_detail(no, sale_price, addTax, supply_price, marginPrice)
        values(new.no, @saleprice, @addtax, @supprice, @marPrice);
    end ;


update =
    create trigger tri_sale_update_after_detail
    after update on sale
    for each row
    begin
        set @saleprice = new.price * new.salecnt,
        @addtax = ceil(@saleprice/11),
        @supprice = @saleprice - @addtax,
        @marPrice = round(@supprice * (new.marginrate/100));

     update coffee.sale_detail
     set sale_price = @saleprice, addTax=@addtax, supply_price=@supprice, margin_Price=@marPrice
     where no = new.no;
    end ;

[procedure]
procedure =
    create procedure proc_saledetail_orderby (in isSalePrice boolean)
    begin
        if isSalePrice then
            select (select count(*) + 1 from sale_detail s2 where s2.sale_price > s1.sale_price) rank,
                sale.code code, p.name name, price, salecnt, supply_price, addTax,
                sale_price, marginRate, margin_Price
                from sale inner join sale_detail s1 on sale.no = s1.no join product p on sale.code = p.code order by rank;
        else
            select (select count(*)+1 from sale_detail s2 where s2.margin_Price > s1.margin_Price) rank,
                sale.code code, p.name name, price, salecnt, supply_price, addTax,
                sale_price, marginRate, margin_Price
            from sale inner join sale_detail s1 on sale.no = s1.no join product p on sale.code = p.code order by rank;
        end if;
    end ;


